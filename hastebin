#!/usr/bin/env python3
# Project: hastebin
# Author: Kevin Morris <kevr@0cost.org>
# Description: A tool which uploads data from stdin to hastebin.com
# Copyright (C) 2017 Kevin Morris <kevr@0cost.org>
# Copyright (C) 2020 Denis Zheleztsov <difrex@lessmore.pw>
import argparse
import json
import os
import sys
from select import select
from subprocess import Popen

import requests

url = os.environ.get("HASTEBIN_SERVER_URL", "https://hastebin.com")
timeout = int(os.environ.get("HASTEBIN_SERVER_TIMEOUT", 5))
github_token = os.environ.get("HASTEBIN_TOKEN", "")


def has_data(fd):
    """Immediately timed out select poll"""
    return select([fd], [], [], 0.0) == ([fd], [], [])


def quit(code, msg):
    """Print message to the STDERR and returns exit code"""
    sys.stderr.write(msg + "\n")
    return code


def get_paste(id, token):
    paste_url = f"{url}/raw/{id}"

    try:
        response = requests.get(
            paste_url,
            headers={"Authorization": f"Bearer {token}"},
            timeout=timeout,
        )
    except requests.exceptions.ReadTimeout:
        return 1, "error: http request timed out"
    except requests.exceptions.ConnectTimeout:
        return 1, "error: http connection timed out"

    if response.status_code != requests.codes.ok:
        return 3, f"error: invalid http status code {response.status_code}"

    return 0, response.content.decode().rstrip()


def post_paste(text, token):
    post_url = f"{url}/documents"

    try:
        response = requests.post(
            post_url,
            headers={
                "Content-Type": "text/plain",
                "Accept": "application/json",
                "Authorization": f"Bearer {token}",
            },
            data=text,
            timeout=timeout,
        )
    except requests.exceptions.ReadTimeout:
        return 1, "error: http request timed out"
    except requests.exceptions.ConnectTimeout:
        return 1, "error: http connection timed out"

    if response.status_code != requests.codes.ok:
        return 3, f"error: invalid http status code {response.status_code}"

    return 0, response.content.decode().rstrip()


def main():
    help_description = "Upload text from stdin to HASTEBIN_SERVER_URL. "
    help_description += "If [id] is provided,\nthe corresponding paste is "
    help_description += "fetched and displayed instead."
    footer = """environment variables:
  HASTEBIN_CLIPPER (default: 'xclip -sel primary')
  HASTEBIN_SERVER_URL (default: 'https://hastebin.com')
  HASTEBIN_SERVER_TIMEOUT (default: 5)
"""

    parser = argparse.ArgumentParser(
        description=help_description,
        epilog=footer,
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "--clip-command",
        "-cc",
        metavar="clip_command",
        default=os.environ.get("HASTEBIN_CLIPPER", "xclip -sel primary"),
        help="clipboard command (default: HASTEBIN_CLIPPER)",
    )
    parser.add_argument(
        "--clipboard",
        "-c",
        metavar="clipboard",
        action="store_const",
        const=True,
        default=False,
        help="pipe stdout to --clip-command",
    )
    parser.add_argument(
        "--token",
        "-t",
        metavar="token",
        default=github_token,
        help="valid github api token",
    )
    parser.add_argument(
        "id",
        nargs="?",
        help="when provided, fetches and displays a hastebin paste",
    )
    args = parser.parse_args()

    if not args.token:
        return quit(
            1,
            "error: interacting with hastebin api requires a valid --token,"
            " see https://www.toptal.com/developers/hastebin/documentation",
        )

    if args.id is not None:
        http = False

        if args.id[:4] == "http":
            if args.id[: len(url)] != url:
                return quit(1, f"error: URLs must begin with '{url}'")
            http = True

        paste_id = args.id.split("/")[-1] if http else args.id
        if not paste_id:
            return quit(1, "error: no id provided")

        return_code, response = get_paste(paste_id, args.token)
        if return_code:
            return quit(return_code, response)
        print(response)
    else:
        if not has_data(sys.stdin):
            return quit(1, "error: no data given via stdin")

        try:
            stdin = sys.stdin.read()
        except UnicodeDecodeError:
            return quit(2, "error: an error occured reading stdin")

        return_code, response = post_paste(stdin.encode("utf-8"), args.token)
        if return_code:
            return quit(return_code, response)

        data = json.loads(response)
        paste_url = f'{url}/{data["key"]}'
        print(paste_url)

        if args.clipboard:
            proc = Popen(
                [
                    "/bin/sh",
                    "-c",
                    f'echo -n "{paste_url}" | {args.clip_command}',
                ]
            )
            proc.wait()

    return 0


# main execution
if __name__ == "__main__":
    e = main()
    exit(e)
